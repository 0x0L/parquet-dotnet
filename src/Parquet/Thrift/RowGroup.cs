// <auto-generated/>
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Parquet.Thrift
{

  public partial class RowGroup : TBase
  {
    private List<SortingColumn> _sorting_columns;

    /// <summary>
    /// Metadata for each column chunk in this row group.
    /// This list must have the same order as the SchemaElement list in FileMetaData.
    /// 
    /// </summary>
    public List<ColumnChunk> Columns { get; set; }

    /// <summary>
    /// Total byte size of all the uncompressed column data in this row group *
    /// </summary>
    public long Total_byte_size { get; set; }

    /// <summary>
    /// Number of rows in this row group *
    /// </summary>
    public long Num_rows { get; set; }

    /// <summary>
    /// If set, specifies a sort ordering of the rows in this RowGroup.
    /// The sorting columns can be a subset of all the columns.
    /// </summary>
    public List<SortingColumn> Sorting_columns
    {
      get
      {
        return _sorting_columns;
      }
      set
      {
        __isset.sorting_columns = true;
        this._sorting_columns = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool sorting_columns;
    }

    public RowGroup()
    {
    }

    public RowGroup(List<ColumnChunk> columns, long total_byte_size, long num_rows) : this()
    {
      this.Columns = columns;
      this.Total_byte_size = total_byte_size;
      this.Num_rows = num_rows;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_columns = false;
        bool isset_total_byte_size = false;
        bool isset_num_rows = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  Columns = new List<ColumnChunk>();
                  TList _list16 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i17 = 0; _i17 < _list16.Count; ++_i17)
                  {
                    ColumnChunk _elem18;
                    _elem18 = new ColumnChunk();
                    await _elem18.ReadAsync(iprot, cancellationToken);
                    Columns.Add(_elem18);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_columns = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                Total_byte_size = await iprot.ReadI64Async(cancellationToken);
                isset_total_byte_size = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                Num_rows = await iprot.ReadI64Async(cancellationToken);
                isset_num_rows = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  Sorting_columns = new List<SortingColumn>();
                  TList _list19 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i20 = 0; _i20 < _list19.Count; ++_i20)
                  {
                    SortingColumn _elem21;
                    _elem21 = new SortingColumn();
                    await _elem21.ReadAsync(iprot, cancellationToken);
                    Sorting_columns.Add(_elem21);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_columns)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_total_byte_size)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_num_rows)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("RowGroup");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "columns";
        field.Type = TType.List;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Columns.Count), cancellationToken);
          foreach (ColumnChunk _iter22 in Columns)
          {
            await _iter22.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "total_byte_size";
        field.Type = TType.I64;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Total_byte_size, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "num_rows";
        field.Type = TType.I64;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Num_rows, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (Sorting_columns != null && __isset.sorting_columns)
        {
          field.Name = "sorting_columns";
          field.Type = TType.List;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Sorting_columns.Count), cancellationToken);
            foreach (SortingColumn _iter23 in Sorting_columns)
            {
              await _iter23.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("RowGroup(");
      sb.Append(", Columns: ");
      sb.Append(Columns);
      sb.Append(", Total_byte_size: ");
      sb.Append(Total_byte_size);
      sb.Append(", Num_rows: ");
      sb.Append(Num_rows);
      if (Sorting_columns != null && __isset.sorting_columns)
      {
        sb.Append(", Sorting_columns: ");
        sb.Append(Sorting_columns);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
