// <auto-generated/>
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Parquet.Thrift
{

  /// <summary>
  /// TODO: *
  /// </summary>
  public partial class DictionaryPageHeader : TBase
  {
    private bool _is_sorted;

    /// <summary>
    /// Number of values in the dictionary *
    /// </summary>
    public int Num_values { get; set; }

    /// <summary>
    /// Encoding using this dictionary page *
    /// 
    /// <seealso cref="Encoding"/>
    /// </summary>
    public Encoding Encoding { get; set; }

    /// <summary>
    /// If true, the entries in the dictionary are sorted in ascending order *
    /// </summary>
    public bool Is_sorted
    {
      get
      {
        return _is_sorted;
      }
      set
      {
        __isset.is_sorted = true;
        this._is_sorted = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool is_sorted;
    }

    public DictionaryPageHeader()
    {
    }

    public DictionaryPageHeader(int num_values, Encoding encoding) : this()
    {
      this.Num_values = num_values;
      this.Encoding = encoding;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_num_values = false;
        bool isset_encoding = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Num_values = await iprot.ReadI32Async(cancellationToken);
                isset_num_values = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Encoding = (Encoding)await iprot.ReadI32Async(cancellationToken);
                isset_encoding = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Bool)
              {
                Is_sorted = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_num_values)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_encoding)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("DictionaryPageHeader");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "num_values";
        field.Type = TType.I32;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Num_values, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "encoding";
        field.Type = TType.I32;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)Encoding, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (__isset.is_sorted)
        {
          field.Name = "is_sorted";
          field.Type = TType.Bool;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Is_sorted, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("DictionaryPageHeader(");
      sb.Append(", Num_values: ");
      sb.Append(Num_values);
      sb.Append(", Encoding: ");
      sb.Append(Encoding);
      if (__isset.is_sorted)
      {
        sb.Append(", Is_sorted: ");
        sb.Append(Is_sorted);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
