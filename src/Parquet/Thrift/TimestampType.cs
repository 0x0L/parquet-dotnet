// <auto-generated/>
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Parquet.Thrift
{

  /// <summary>
  /// Timestamp logical type annotation
  /// 
  /// Allowed for physical types: INT64
  /// </summary>
  public partial class TimestampType : TBase
  {

    public bool IsAdjustedToUTC { get; set; }

    public TimeUnit Unit { get; set; }

    public TimestampType()
    {
    }

    public TimestampType(bool isAdjustedToUTC, TimeUnit unit) : this()
    {
      this.IsAdjustedToUTC = isAdjustedToUTC;
      this.Unit = unit;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_isAdjustedToUTC = false;
        bool isset_unit = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool)
              {
                IsAdjustedToUTC = await iprot.ReadBoolAsync(cancellationToken);
                isset_isAdjustedToUTC = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Unit = new TimeUnit();
                await Unit.ReadAsync(iprot, cancellationToken);
                isset_unit = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_isAdjustedToUTC)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_unit)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("TimestampType");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "isAdjustedToUTC";
        field.Type = TType.Bool;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(IsAdjustedToUTC, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "unit";
        field.Type = TType.Struct;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Unit.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("TimestampType(");
      sb.Append(", IsAdjustedToUTC: ");
      sb.Append(IsAdjustedToUTC);
      sb.Append(", Unit: ");
      sb.Append(Unit== null ? "<null>" : Unit.ToString());
      sb.Append(")");
      return sb.ToString();
    }
  }

}
