// <auto-generated/>
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Parquet.Thrift
{

  /// <summary>
  /// Description for file metadata
  /// </summary>
  public partial class FileMetaData : TBase
  {
    private List<KeyValue> _key_value_metadata;
    private string _created_by;
    private List<ColumnOrder> _column_orders;

    /// <summary>
    /// Version of this file *
    /// </summary>
    public int Version { get; set; }

    /// <summary>
    /// Parquet schema for this file.  This schema contains metadata for all the columns.
    /// The schema is represented as a tree with a single root.  The nodes of the tree
    /// are flattened to a list by doing a depth-first traversal.
    /// The column metadata contains the path in the schema for that column which can be
    /// used to map columns to nodes in the schema.
    /// The first element is the root *
    /// </summary>
    public List<SchemaElement> Schema { get; set; }

    /// <summary>
    /// Number of rows in this file *
    /// </summary>
    public long Num_rows { get; set; }

    /// <summary>
    /// Row groups in this file *
    /// </summary>
    public List<RowGroup> Row_groups { get; set; }

    /// <summary>
    /// Optional key/value metadata *
    /// </summary>
    public List<KeyValue> Key_value_metadata
    {
      get
      {
        return _key_value_metadata;
      }
      set
      {
        __isset.key_value_metadata = true;
        this._key_value_metadata = value;
      }
    }

    /// <summary>
    /// String for application that wrote this file.  This should be in the format
    /// <Application> version <App Version> (build <App Build Hash>).
    /// e.g. impala version 1.0 (build 6cf94d29b2b7115df4de2c06e2ab4326d721eb55)
    /// 
    /// </summary>
    public string Created_by
    {
      get
      {
        return _created_by;
      }
      set
      {
        __isset.created_by = true;
        this._created_by = value;
      }
    }

    /// <summary>
    /// Sort order used for the min_value and max_value fields of each column in
    /// this file. Each sort order corresponds to one column, determined by its
    /// position in the list, matching the position of the column in the schema.
    /// 
    /// Without column_orders, the meaning of the min_value and max_value fields is
    /// undefined. To ensure well-defined behaviour, if min_value and max_value are
    /// written to a Parquet file, column_orders must be written as well.
    /// 
    /// The obsolete min and max fields are always sorted by signed comparison
    /// regardless of column_orders.
    /// </summary>
    public List<ColumnOrder> Column_orders
    {
      get
      {
        return _column_orders;
      }
      set
      {
        __isset.column_orders = true;
        this._column_orders = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool key_value_metadata;
      public bool created_by;
      public bool column_orders;
    }

    public FileMetaData()
    {
    }

    public FileMetaData(int version, List<SchemaElement> schema, long num_rows, List<RowGroup> row_groups) : this()
    {
      this.Version = version;
      this.Schema = schema;
      this.Num_rows = num_rows;
      this.Row_groups = row_groups;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_version = false;
        bool isset_schema = false;
        bool isset_num_rows = false;
        bool isset_row_groups = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Version = await iprot.ReadI32Async(cancellationToken);
                isset_version = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  Schema = new List<SchemaElement>();
                  TList _list44 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i45 = 0; _i45 < _list44.Count; ++_i45)
                  {
                    SchemaElement _elem46;
                    _elem46 = new SchemaElement();
                    await _elem46.ReadAsync(iprot, cancellationToken);
                    Schema.Add(_elem46);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_schema = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                Num_rows = await iprot.ReadI64Async(cancellationToken);
                isset_num_rows = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  Row_groups = new List<RowGroup>();
                  TList _list47 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i48 = 0; _i48 < _list47.Count; ++_i48)
                  {
                    RowGroup _elem49;
                    _elem49 = new RowGroup();
                    await _elem49.ReadAsync(iprot, cancellationToken);
                    Row_groups.Add(_elem49);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_row_groups = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.List)
              {
                {
                  Key_value_metadata = new List<KeyValue>();
                  TList _list50 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i51 = 0; _i51 < _list50.Count; ++_i51)
                  {
                    KeyValue _elem52;
                    _elem52 = new KeyValue();
                    await _elem52.ReadAsync(iprot, cancellationToken);
                    Key_value_metadata.Add(_elem52);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                Created_by = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.List)
              {
                {
                  Column_orders = new List<ColumnOrder>();
                  TList _list53 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i54 = 0; _i54 < _list53.Count; ++_i54)
                  {
                    ColumnOrder _elem55;
                    _elem55 = new ColumnOrder();
                    await _elem55.ReadAsync(iprot, cancellationToken);
                    Column_orders.Add(_elem55);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_version)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_schema)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_num_rows)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_row_groups)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("FileMetaData");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "version";
        field.Type = TType.I32;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Version, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "schema";
        field.Type = TType.List;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Schema.Count), cancellationToken);
          foreach (SchemaElement _iter56 in Schema)
          {
            await _iter56.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "num_rows";
        field.Type = TType.I64;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Num_rows, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "row_groups";
        field.Type = TType.List;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Row_groups.Count), cancellationToken);
          foreach (RowGroup _iter57 in Row_groups)
          {
            await _iter57.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (Key_value_metadata != null && __isset.key_value_metadata)
        {
          field.Name = "key_value_metadata";
          field.Type = TType.List;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Key_value_metadata.Count), cancellationToken);
            foreach (KeyValue _iter58 in Key_value_metadata)
            {
              await _iter58.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Created_by != null && __isset.created_by)
        {
          field.Name = "created_by";
          field.Type = TType.String;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Created_by, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Column_orders != null && __isset.column_orders)
        {
          field.Name = "column_orders";
          field.Type = TType.List;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Column_orders.Count), cancellationToken);
            foreach (ColumnOrder _iter59 in Column_orders)
            {
              await _iter59.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("FileMetaData(");
      sb.Append(", Version: ");
      sb.Append(Version);
      sb.Append(", Schema: ");
      sb.Append(Schema);
      sb.Append(", Num_rows: ");
      sb.Append(Num_rows);
      sb.Append(", Row_groups: ");
      sb.Append(Row_groups);
      if (Key_value_metadata != null && __isset.key_value_metadata)
      {
        sb.Append(", Key_value_metadata: ");
        sb.Append(Key_value_metadata);
      }
      if (Created_by != null && __isset.created_by)
      {
        sb.Append(", Created_by: ");
        sb.Append(Created_by);
      }
      if (Column_orders != null && __isset.column_orders)
      {
        sb.Append(", Column_orders: ");
        sb.Append(Column_orders);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
