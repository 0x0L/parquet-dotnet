// <auto-generated/>
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Parquet.Thrift
{

  public partial class OffsetIndex : TBase
  {

    /// <summary>
    /// PageLocations, ordered by increasing PageLocation.offset. It is required
    /// that page_locations[i].first_row_index < page_locations[i+1].first_row_index.
    /// </summary>
    public List<PageLocation> Page_locations { get; set; }

    public OffsetIndex()
    {
    }

    public OffsetIndex(List<PageLocation> page_locations) : this()
    {
      this.Page_locations = page_locations;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_page_locations = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  Page_locations = new List<PageLocation>();
                  TList _list24 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i25 = 0; _i25 < _list24.Count; ++_i25)
                  {
                    PageLocation _elem26;
                    _elem26 = new PageLocation();
                    await _elem26.ReadAsync(iprot, cancellationToken);
                    Page_locations.Add(_elem26);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_page_locations = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_page_locations)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("OffsetIndex");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "page_locations";
        field.Type = TType.List;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Page_locations.Count), cancellationToken);
          foreach (PageLocation _iter27 in Page_locations)
          {
            await _iter27.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("OffsetIndex(");
      sb.Append(", Page_locations: ");
      sb.Append(Page_locations);
      sb.Append(")");
      return sb.ToString();
    }
  }

}
